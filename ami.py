import socket
import time
import requests
from threading import Timer
from config import ASTERISK_HOST, ASTERISK_PORT, ASTERISK_USERNAME, ASTERISK_PASSWORD, WAIT_TIME_THRESHOLD
from telegram_bot import send_telegram_message
from yougile import search_yougile_task, search_billing
from database import update_call_status, update_call_duration, execute_query, fetch_query
from datetime import datetime, timedelta
from telepot.namedtuple import InlineKeyboardMarkup, InlineKeyboardButton

# –•—Ä–∞–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∑–æ–≤–∞—Ö –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID –∫–∞–Ω–∞–ª–∞ –∏ —Å—á–µ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–æ–≤
active_calls = {}
call_queue = []  # –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∑–≤–æ–Ω–∫–æ–≤


def ami_login(sock):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Asterisk AMI."""
    login_command = (
        f"Action: Login\r\n"
        f"Username: {ASTERISK_USERNAME}\r\n"
        f"Secret: {ASTERISK_PASSWORD}\r\n"
        f"ActionID: 1\r\n\r\n"
    )
    sock.send(login_command.encode())
    time.sleep(1)
    response = sock.recv(4096).decode()
    if "Success" in response:
        print("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Asterisk AMI")
    else:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Asterisk AMI")
        print(response)


def send_call_update(call_id, phone_number, call_status, duration="00:00"):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –≤–∞—à–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (app.py) –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞.
    –î–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å UniqueID:
    """
    call_id_str = str(call_id).split('.')[0]
    url = (
        f"http://localhost:80/num/{phone_number}/"
        f"{call_status}?call_id={call_id_str}&duration={duration}"
    )
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ URL: {url}")
    try:
        response = requests.get(url)
        if response.status_code == 200:
            print(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∑–æ–≤–µ: {url}")
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {url}: {e}")


def add_call(call_id, phone_number, status, yougile_task):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è).
    –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –µ—Å—Ç—å –≤ database.py, –Ω–æ –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–≤–æ—è.
    –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–µ–∑–∞–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å —É call_id.
    """
    call_id_str = str(call_id).split('.')[0]
    print(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞ –≤ –±–∞–∑—É: ID={call_id_str}, –Ω–æ–º–µ—Ä={phone_number}, —Å—Ç–∞—Ç—É—Å={status}")
    query = '''INSERT IGNORE INTO calls (
        id, phone_number, date_time, duration, line, fio,
        contract, balance, min_payment, status, yougile_task
    ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)'''
    args = (
        call_id_str,
        phone_number,
        datetime.now(),
        "00:00",
        "500050",
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        0.0,
        0.0,
        status,
        yougile_task
    )
    execute_query(query, args)


def notify_active_calls():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤."""
    active_incoming_calls = [
        (unique_id, call_info) for unique_id, call_info in active_calls.items()
        if call_info['state'] == 'New' and not call_info['call_finished']
    ]
    
    if not active_incoming_calls:
        send_telegram_message("üîç –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ –Ω–µ—Ç.")
    else:
        message = "üìû –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤:\n"
        for index, (unique_id, call_info) in enumerate(active_incoming_calls, start=1):
            caller_id = call_info['caller_id']
            duration = time.time() - call_info['start_time']
            state = "–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞" if not call_info['operator_connected'] else "–†–∞–∑–≥–æ–≤–æ—Ä —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"
            message += (
                f"{index}. –ù–æ–º–µ—Ä: {caller_id}, "
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {int(duration)} —Å–µ–∫, "
                f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}\n"
            )
        send_telegram_message(message)


def normalize_phone_number(phone_number):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —É–±–∏—Ä–∞—è –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –±–µ—Ä—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ñ—Ä."""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    digits = ''.join(filter(str.isdigit, phone_number))
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ñ—Ä
    return digits[-10:]


def handle_ami_event(event_data):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è Asterisk AMI."""
    lines = event_data.split("\r\n")
    event = {}
    for line in lines:
        if ": " in line:
            key, value = line.split(": ", 1)
            event[key.strip()] = value.strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è Newchannel (–Ω–æ–≤—ã–π –≤—Ö–æ–¥—è—â–∏–π –∏–ª–∏ –∏—Å—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤)
    if event.get("Event") == "Newchannel":
        caller_id = event.get("CallerIDNum", "Unknown")
        unique_id = event.get("Uniqueid", None)
        exten = event.get("Exten", "")

        if not unique_id:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–≤–æ–Ω–æ–∫ –∏—Å—Ö–æ–¥—è—â–∏–º –Ω–∞ –Ω–æ–º–µ—Ä 83955500050
        if exten == "83955500050":
            print(f"[DEBUG] –ó–≤–æ–Ω–æ–∫ —Å {caller_id} –Ω–∞ {exten} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ –∏—Å—Ö–æ–¥—è—â–∏–π")
            return

        # –ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫: –∫–æ—Ä–æ—Ç–∫–∏–π CallerIDNum (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä) –∏ –¥–ª–∏–Ω–Ω—ã–π Exten (–≤–Ω–µ—à–Ω–∏–π –Ω–æ–º–µ—Ä)
        if len(caller_id) <= 4 and len(exten) > 4 and exten[0].isdigit():
            active_calls[unique_id] = {
                'caller_id': caller_id,
                'destination': exten,
                'start_time': time.time(),
                'state': 'Outgoing',
                'operator_connected': False,
                'call_finished': False,
                'call_answered': False
            }
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ Telegram, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–∞–π—Ç
            send_telegram_message(
                f"üìû –ù–∞—á–∞–ª–æ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –æ—Ç {caller_id} –Ω–∞ –Ω–æ–º–µ—Ä {exten}"
            )

        # –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
        elif caller_id != "<unknown>" and len(caller_id) > 4:
            active_calls[unique_id] = {
                'caller_id': caller_id,
                'start_time': time.time(),
                'state': 'New',
                'waiting_timer': None,
                'operator_connected': False,
                'call_finished': False,
                'call_waited_too_long': False
            }
            active_calls[unique_id]['waiting_timer'] = Timer(
                WAIT_TIME_THRESHOLD,
                notify_waiting_for_operator,
                [unique_id]
            )
            active_calls[unique_id]['waiting_timer'].start()
            call_queue.append(caller_id)

            yougile_url = search_yougile_task(caller_id)
            billing_url = search_billing(caller_id)

            if yougile_url:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É –≤ YouGile", url=yougile_url),
                    InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Billing", url=billing_url)
                ]])
                send_telegram_message(
                    f"üìû –ù–æ–≤—ã–π –≤—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤ –æ—Ç {caller_id} (–û—á–µ—Ä–µ–¥—å: {len(call_queue)})",
                    reply_markup=keyboard
                )
            else:
                send_telegram_message(
                    f"üìû –ù–æ–≤—ã–π –≤—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤ –æ—Ç {caller_id} (–û—á–µ—Ä–µ–¥—å: {len(call_queue)}). "
                    f"–ó–∞–¥–∞—á–∞ –≤ YouGile –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                )

            add_call(unique_id, caller_id, "incoming", yougile_url)
            send_call_update(unique_id, caller_id, "incoming")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è VarSet (–æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∏–ª–∏ –∞–±–æ–Ω–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª)
    elif event.get("Event") == "VarSet":
        unique_id = event.get("Uniqueid", None)
        variable = event.get("Variable", None)
        value = event.get("Value", None)

        if unique_id in active_calls and variable == "BRIDGEPEER" and value:
            call_info = active_calls[unique_id]
            if call_info['state'] == 'Outgoing' and not call_info['call_answered']:
                call_info['call_answered'] = True
                call_info['operator_connected'] = True
                send_telegram_message(
                    f"‚òéÔ∏è –ê–±–æ–Ω–µ–Ω—Ç {call_info['destination']} –≤–∑—è–ª —Ç—Ä—É–±–∫—É ‚Äî –∏–¥–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º {call_info['caller_id']}."
                )

                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                normalized_destination = normalize_phone_number(call_info['destination'])

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫ —Å —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                query = """
                    SELECT id, date_time
                    FROM calls
                    WHERE RIGHT(phone_number, 10) = %s
                    AND status = 'missed'
                    AND date_time >= %s
                    ORDER BY date_time DESC
                    LIMIT 1
                """
                check_time = datetime.now() - timedelta(hours=24)
                result = fetch_query(query, (normalized_destination, check_time))
                if result:
                    missed_call = result[0]
                    missed_call_id = missed_call['id']
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –Ω–∞ 'call_backed'
                    update_call_status(missed_call_id, "call_backed")
                    send_telegram_message(
                        f"‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫ —Å ID {missed_call_id} –æ—Ç {call_info['destination']} "
                        f"–æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ —Å—Ç–∞—Ç—É—Å–∞ 'call_backed' –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞."
                    )

            elif call_info['state'] == 'New' and not call_info['operator_connected']:
                call_info['operator_connected'] = True
                if call_info['waiting_timer']:
                    call_info['waiting_timer'].cancel()
                send_telegram_message(
                    f"‚òéÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call_info['caller_id']} —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º."
                )
                send_call_update(unique_id, call_info['caller_id'], "incoming")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è Hangup (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞)
    elif event.get("Event") == "Hangup":
        unique_id = event.get("Uniqueid", None)
        reason = event.get("Cause-txt", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞")

        if unique_id and unique_id in active_calls:
            call_info = active_calls[unique_id]
            if call_info['call_finished']:
                return

            call_info['call_finished'] = True
            if call_info.get('waiting_timer'):
                call_info['waiting_timer'].cancel()

            duration = time.time() - call_info['start_time']
            duration_formatted = time.strftime('%H:%M:%S', time.gmtime(duration))

            if call_info['state'] == 'Outgoing':
                if call_info['call_answered']:
                    send_telegram_message(
                        f"üîö –ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç {call_info['caller_id']} –Ω–∞ {call_info['destination']} –æ–∫–æ–Ω—á–µ–Ω. "
                        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_formatted}."
                    )
                else:
                    send_telegram_message(
                        f"üì¥ –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è –¥–æ –∞–±–æ–Ω–µ–Ω—Ç–∞ {call_info['destination']} –æ—Ç {call_info['caller_id']}. "
                        f"–ü—Ä–∏—á–∏–Ω–∞: {reason}."
                    )
            else:  # –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
                caller_id = call_info['caller_id']
                if duration < WAIT_TIME_THRESHOLD and not call_info['operator_connected']:
                    send_telegram_message(
                        f"‚ùó –ó–≤–æ–Ω–æ–∫ –æ—Ç {caller_id} –±—ã–ª —Å–±—Ä–æ—à–µ–Ω –¥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å."
                    )
                    send_call_update(unique_id, caller_id, "missed", duration_formatted)
                elif call_info['operator_connected']:
                    send_telegram_message(
                        f"üîö –ó–≤–æ–Ω–æ–∫ –æ–∫–æ–Ω—á–µ–Ω –æ–¥–Ω–æ–π –∏–∑ —Å—Ç–æ—Ä–æ–Ω. –ù–æ–º–µ—Ä: {caller_id}."
                    )
                    send_call_update(unique_id, caller_id, "answered", duration_formatted)
                else:
                    send_telegram_message(
                        f"üîö –ó–≤–æ–Ω–æ–∫ –æ—Ç {caller_id} –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}."
                    )
                    send_call_update(unique_id, caller_id, "missed", duration_formatted)
                if caller_id in call_queue:
                    call_queue.remove(caller_id)

            active_calls.pop(unique_id, None)


def notify_waiting_for_operator(unique_id):
    """–§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –Ω–∞ —Ä–æ–±–æ—Ç–µ –±–æ–ª–µ–µ WAIT_TIME_THRESHOLD —Å–µ–∫—É–Ω–¥."""
    if unique_id in active_calls:
        call_info = active_calls[unique_id]
        caller_id = call_info['caller_id']
        if not call_info['operator_connected']:
            send_telegram_message(
                f"‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {caller_id} –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
            )


def listen_ami_events(sock):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π AMI."""
    buffer = ""
    while True:
        data = sock.recv(1024).decode()
        buffer += data
        while "\r\n\r\n" in buffer:
            event, buffer = buffer.split("\r\n\r\n", 1)
            handle_ami_event(event)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π."""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((ASTERISK_HOST, ASTERISK_PORT))
        ami_login(sock)
        listen_ami_events(sock)
    except Exception as e:
        send_telegram_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Asterisk AMI: {e}")
    finally:
        sock.close()


if __name__ == "__main__":
    main()
