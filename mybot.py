from telethon import TelegramClient, events, Button
import requests
import re
import asyncio
from sqlalchemy import create_engine, text
from sqlalchemy.pool import QueuePool
from sqlalchemy.exc import SQLAlchemyError
import logging
from switch3 import parse_switch_sv
from telnet import main as telnet_diag
from telnet import telnet_connect_and_search
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –∏ —Ç–æ–∫–µ–Ω–æ–≤
API_ID = '25748036'
API_HASH = 'ecb6f32632cd81aa04a11bb1c6132150'
BOT_TOKEN = '7582641889:AAEyZueE2cEbrHWHRxzxvwUkqU48vNtzRcE'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ YouGile API
YOUGILE_URL = "https://ru.yougile.com/api-v2/tasks"
YOUGILE_HEADERS = {
    "Content-Type": "application/json",
    "Authorization": "Bearer dgSMb2NTAPnUHyAtnvrDAMAAbZuWwHoB2Dpv6E4zd0yHe0spEt9f3i0ElIqN61OM"
}
COLUMN_ID = "8e439bc4-b236-4e07-a230-1aa0f2614062"

# ID –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç–æ–≤
GROUP_CHAT_ID = '@raketamontage'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_config = {
    'host': '192.168.10.79',
    'user': 'vanesh',
    'password': 'Exonet_15',
    'db': 'raketa',
    'charset': 'utf8mb4',
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
db_url = f"mysql+pymysql://{db_config['user']}:{db_config['password']}@{db_config['host']}/{db_config['db']}?charset={db_config['charset']}"

# –°–æ–∑–¥–∞–Ω–∏–µ Engine —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
engine = create_engine(db_url, poolclass=QueuePool, pool_size=5, max_overflow=10, pool_recycle=3600)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
client = TelegramClient('bot_session', API_ID, API_HASH).start(bot_token=BOT_TOKEN)

MAX_OTHER_PHOTOS = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è "–¥—Ä—É–≥–æ–µ"

# –≠—Ç–∞–ø—ã —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç–∞
PHOTO_STEPS = [
    "üì∏ –£–∑–µ–ª –°–≤—è–∑–∏ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ",
    "üì∏ –ü—Ä–æ–∫–ª–∞–¥–∫—É –ª–∏–Ω–∏–∏ —Å–≤—è–∑–∏",
    "üì∏ –í–≤–æ–¥ –∫–∞–±–µ–ª—è –≤ –ø–æ–º–µ—â–µ–Ω–∏–µ",
    "üì∏ –ù–∞–∫–ª–µ–π–∫—É –Ω–∞ –∫–∞–±–µ–ª–µ –≤ –£–∑–ª–µ –°–≤—è–∑–∏",
    "üì∏ –ö–∞–±–µ–ª—å—Å–±–æ—Ä–∫–∞",
    "üì∏ –ë–∏—Ä–∫—É –Ω–∞ –∫–∞–±–µ–ª–µ —É –∞–±–æ–Ω–µ–Ω—Ç–∞",
    "üì∏ –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏",
    "üì∏ –û–ø–ª–∞—Ç–∞",
    "üì∏ –¥—Ä—É–≥–æ–µ"  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø—è—Ç–∞—è –∏ –Ω–æ–≤—ã–π —à–∞–≥
]

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_task_status = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

user_search_results = {}
user_search_page = {}
RESULTS_PER_PAGE = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è)
def search_abonents(query):
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
    query = query.lower().strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
    phone_pattern = re.compile(r'^(?:\+7|8)?(\d{10})$')
    phone_match = phone_pattern.match(query)
    if phone_match:
        query = phone_match.group(1)  # –ü–æ–ª—É—á–∞–µ–º 10-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –§–ò–û
    name_parts = query.split()

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—É–ª
        with engine.connect() as connection:
            # –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ abonents
            sql_abonents = text("""
                SELECT 
                    name AS fio, 
                    contract_number, 
                    NULL AS address, 
                    sms AS phone_number
                FROM abonents
                WHERE LOWER(name) LIKE :like_query
                   OR LOWER(contract_number) LIKE :like_query
                   OR sms LIKE :like_query
            """)
            like_query = f"%{query}%"
            results_abonents = connection.execute(sql_abonents, {"like_query": like_query}).mappings().fetchall()

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º –§–ò–û –≤ abonents
            if len(name_parts) > 1:
                fio_query = ' '.join(name_parts)
                sql_fio_abonents = text("""
                    SELECT 
                        name AS fio, 
                        contract_number, 
                        NULL AS address, 
                        sms AS phone_number
                    FROM abonents
                    WHERE LOWER(name) LIKE :fio_query
                """)
                results_abonents += connection.execute(sql_fio_abonents, {"fio_query": f"%{fio_query}%"}).mappings().fetchall()

            # –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ sv_carbua
            sql_sv_carbua = text("""
                SELECT 
                    Name AS fio, 
                    Contract_Num AS contract_number, 
                    CONCAT_WS(', ', City, Street, S_Number, A_Home_Number, Custom_Address) AS address, 
                    CONCAT_WS(', ', SMS, Phone1, Phone2, Phone3) AS phone_number
                FROM sv_carbua
                WHERE LOWER(Name) LIKE :like_query
                   OR LOWER(Contract_Num) LIKE :like_query
                   OR SMS LIKE :like_query
                   OR Phone1 LIKE :like_query
                   OR Phone2 LIKE :like_query
                   OR Phone3 LIKE :like_query
            """)
            results_sv_carbua = connection.execute(sql_sv_carbua, {"like_query": like_query}).mappings().fetchall()

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º –§–ò–û –≤ sv_carbua
            if len(name_parts) > 1:
                fio_query = ' '.join(name_parts)
                sql_fio_sv_carbua = text("""
                    SELECT 
                        Name AS fio, 
                        Contract_Num AS contract_number, 
                        CONCAT_WS(', ', City, Street, S_Number, A_Home_Number, Custom_Address) AS address, 
                        CONCAT_WS(', ', SMS, Phone1, Phone2, Phone3) AS phone_number
                    FROM sv_carbua
                    WHERE LOWER(Name) LIKE :fio_query
                """)
                results_sv_carbua += connection.execute(sql_fio_sv_carbua, {"fio_query": f"%{fio_query}%"}).mappings().fetchall()

        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        combined_results = list(results_abonents) + list(results_sv_carbua)
        unique_results = {}
        for abonent in combined_results:
            key = (abonent['fio'], abonent['contract_number'])
            if key not in unique_results:
                unique_results[key] = {
                    'fio': abonent['fio'],
                    'contract_number': abonent['contract_number'],
                    'address': abonent['address'] if abonent['address'] else '‚Äî',
                    'phone_number': abonent['phone_number'] if abonent['phone_number'] else '‚Äî'
                }

        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(unique_results)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
        return list(unique_results.values())

    except SQLAlchemyError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
        return []

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –∏–∑ YouGile
def get_tasks():
    try:
        response = requests.get(YOUGILE_URL, headers=YOUGILE_HEADERS, params={"limit": "9999", "columnId": COLUMN_ID})
        if response.status_code == 200:
            tasks = response.json().get("content", [])
            return tasks
        else:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ YouGile. –°—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status_code}")
            return []
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ YouGile API: {e}")
        return []

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
@client.on(events.NewMessage(pattern='/tasks'))
async def list_tasks(event):
    tasks = get_tasks()
    if tasks:
        buttons = []
        for task in tasks:
            task_id = task["id"]
            task_title = task["title"]
            if task_id in user_task_status and user_task_status[task_id]["completed"]:
                task_title += " ‚úÖ"
            buttons.append([Button.inline(task_title, data=f"choose_{task_id}")])
        await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:", buttons=buttons)
    else:
        await event.respond("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
@client.on(events.CallbackQuery(pattern=r"choose_"))
async def choose_task(event):
    task_id = event.data.decode('utf-8').replace("choose_", "")
    if task_id not in user_task_status:
        tasks = get_tasks()
        task_title = next((task["title"] for task in tasks if task["id"] == task_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞")
        user_task_status[task_id] = {
            "completed": False,
            "photos": {step: [] for step in range(len(PHOTO_STEPS))},  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ
            "active_step": None,
            "title": task_title
        }
    await update_task_buttons(event, task_id)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —à–∞–≥–æ–≤ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
async def update_task_buttons(event, task_id):
    task_status = user_task_status[task_id]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–∞–º–∏
    task_description = f"üìã –í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞—á—É: *{task_status['title']}*\n\n–í—ã–ø–æ–ª–Ω—è–π—Ç–µ —à–∞–≥–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É –∏–ª–∏ –ø–æ–º–µ—á–∞–π—Ç–µ –∏—Ö –∫–∞–∫ '–ù–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å'."
    await event.respond(task_description, parse_mode="markdown")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —à–∞–≥–æ–≤
    buttons = []
    for step, photo_list in task_status["photos"].items():
        step_text = PHOTO_STEPS[step]
        if PHOTO_STEPS[step] == "üì∏ –¥—Ä—É–≥–æ–µ":
            if len(photo_list) > 0:
                step_text = f"‚úÖ {step_text} ({len(photo_list)} —Ñ–æ—Ç–æ)"
            else:
                step_text = f"{step_text}"
        else:
            if len(photo_list) > 0:
                step_text = f"‚úÖ {step_text}"
        buttons.append([Button.inline(step_text, data=f"step_{task_id}_{step}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    buttons.append([
        Button.inline("–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", data=f"next_page_{task_id}"),
        Button.inline("–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", data=f"prev_page_{task_id}")
    ])
    buttons.append([Button.inline("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", data=f"complete_{task_id}")])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–≥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", buttons=buttons)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–≥–∞
@client.on(events.CallbackQuery(pattern=r"step_"))
async def handle_step(event):
    data = event.data.decode('utf-8').split('_')
    task_id = data[1]
    step = int(data[2])

    if task_id in user_task_status:
        task_status = user_task_status[task_id]
        if PHOTO_STEPS[step] == "üì∏ –¥—Ä—É–≥–æ–µ":
            await event.respond(
                f"–í—ã–ø–æ–ª–Ω–∏—Ç–µ —à–∞–≥: '{PHOTO_STEPS[step]}' (–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å', –µ—Å–ª–∏ —à–∞–≥ –Ω–µ –Ω—É–∂–µ–Ω.",
                buttons=[
                    Button.inline("–ù–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å", data=f"skip_{task_id}_{step}"),
                    Button.inline("–ù–∞–∑–∞–¥", data=f"back_{task_id}")
                ]
            )
        else:
            if len(task_status["photos"][step]) > 0:
                await event.answer(f"–®–∞–≥ '{PHOTO_STEPS[step]}' —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω!", alert=True)
                return
            await event.respond(
                f"–í—ã–ø–æ–ª–Ω–∏—Ç–µ —à–∞–≥: '{PHOTO_STEPS[step]}' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å', –µ—Å–ª–∏ —à–∞–≥ –Ω–µ –Ω—É–∂–µ–Ω.",
                buttons=[
                    Button.inline("–ù–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å", data=f"skip_{task_id}_{step}"),
                    Button.inline("–ù–∞–∑–∞–¥", data=f"back_{task_id}")
                ]
            )
        task_status["active_step"] = step

# –ü—Ä–æ–ø—É—Å–∫ —à–∞–≥–∞
@client.on(events.CallbackQuery(pattern=r"skip_"))
async def skip_step(event):
    data = event.data.decode('utf-8').split('_')
    task_id = data[1]
    step = int(data[2])

    if task_id in user_task_status:
        task_status = user_task_status[task_id]
        if PHOTO_STEPS[step] == "üì∏ –¥—Ä—É–≥–æ–µ":
            # –î–ª—è "–¥—Ä—É–≥–æ–µ" –ø—Ä–æ–ø—É—Å–∫ –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞, –Ω–æ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ "skipped"
            task_status["photos"][step] = "skipped"
        else:
            if not task_status["photos"][step]:
                task_status["photos"][step] = "skipped"
        task_status["active_step"] = None
        if all(
            (PHOTO_STEPS[s] == "üì∏ –¥—Ä—É–≥–æ–µ" and len(task_status["photos"][s]) > 0) or
            (PHOTO_STEPS[s] != "üì∏ –¥—Ä—É–≥–æ–µ" and (len(task_status["photos"][s]) > 0 or task_status["photos"][s] == "skipped"))
            for s in task_status["photos"]
        ):
            await complete_task_and_send_report(event, task_id)
        else:
            await update_task_buttons(event, task_id)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
async def complete_task_and_send_report(event, task_id):
    task_status = user_task_status[task_id]
    photos = []
    for step, photo_list in task_status["photos"].items():
        if PHOTO_STEPS[step] == "üì∏ –¥—Ä—É–≥–æ–µ":
            photos.extend(photo_list)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ "–¥—Ä—É–≥–æ–µ"
        elif photo_list not in [None, "skipped"]:
            if isinstance(photo_list, list) and len(photo_list) > 0:
                photos.append(photo_list[0])  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤ –æ–¥–Ω–æ —Ñ–æ—Ç–æ
    if photos:
        await client.send_file(
            GROUP_CHAT_ID,
            photos,
            caption=f"–ó–∞–¥–∞—á–∞ '{task_status['title']}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚úÖ"
        )
    else:
        await event.respond(f"–ó–∞–¥–∞—á–∞ '{task_status['title']}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
    task_status["completed"] = True
    await event.respond(f"–ó–∞–¥–∞—á–∞ '{task_status['title']}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚úÖ")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤—Ä—É—á–Ω—É—é
@client.on(events.CallbackQuery(pattern=r"complete_"))
async def complete_task_manual(event):
    task_id = event.data.decode('utf-8').replace("complete_", "")
    if task_id in user_task_status:
        task_status = user_task_status[task_id]
        if not task_status["completed"]:
            await complete_task_and_send_report(event, task_id)
        else:
            await event.respond(f"–ó–∞–¥–∞—á–∞ '{task_status['title']}' —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@client.on(events.CallbackQuery(pattern=r"(next|prev)_page_(\w+)"))
async def handle_pagination(event):
    direction, user_id = event.pattern_match.groups()
    if user_id not in user_search_results:
        await event.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.", alert=True)
        return

    current_page = user_search_page.get(user_id, 0)
    total_results = len(user_search_results[user_id])
    total_pages = (total_results + RESULTS_PER_PAGE - 1) // RESULTS_PER_PAGE

    if direction == "next":
        if current_page < total_pages - 1:
            user_search_page[user_id] = current_page + 1
        else:
            await event.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.", alert=True)
            return
    elif direction == "prev":
        if current_page > 0:
            user_search_page[user_id] = current_page - 1
        else:
            await event.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.", alert=True)
            return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = user_search_page[user_id]
    start = page * RESULTS_PER_PAGE
    end = start + RESULTS_PER_PAGE
    chunk = user_search_results[user_id][start:end]

    response_text = f"–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∞–±–æ–Ω–µ–Ω—Ç—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):\n\n"
    for idx, abonent in enumerate(chunk, start=start + 1):
        fio = abonent.get('fio', '‚Äî')
        contract = abonent.get('contract_number', '‚Äî')
        address = abonent.get('address', '‚Äî')
        phone = abonent.get('phone_number', '‚Äî')
        response_text += (
            f"**{idx}. –§–ò–û:** {fio}\n"
            f"**‚Ññ –î–æ–≥–æ–≤–æ—Ä–∞:** {contract}\n"
            f"**–ê–¥—Ä–µ—Å:** {address}\n"
            f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {phone}\n\n"
        )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons = []
    if page < total_pages - 1:
        buttons.append(Button.inline("–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", data=f"next_page_{user_id}"))
    if page > 0:
        buttons.append(Button.inline("–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", data=f"prev_page_{user_id}"))
    await event.edit(response_text, buttons=[buttons], parse_mode="markdown")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —à–∞–≥–∞
@client.on(events.NewMessage(func=lambda e: e.is_private and e.photo))
async def handle_photo(event):
    user_id = event.sender_id
    message = event.message

    # –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_tasks = [task_id for task_id, task in user_task_status.items() if task["active_step"] is not None and not task["completed"]]
    if not active_tasks:
        await event.respond("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —à–∞–≥–∞ –¥–ª—è –æ—Ç—á—ë—Ç–∞. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ.")
        return
    task_id = active_tasks[0]
    task_status = user_task_status[task_id]
    active_step = task_status["active_step"]

    if PHOTO_STEPS[active_step] == "üì∏ –¥—Ä—É–≥–æ–µ":
        if len(task_status["photos"][active_step]) >= MAX_OTHER_PHOTOS:
            await event.respond(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —à–∞–≥–∞ '{PHOTO_STEPS[active_step]}' ({MAX_OTHER_PHOTOS} —Ñ–æ—Ç–æ).")
            return
        task_status["photos"][active_step].append(message.photo)
        await event.respond(
            f"–§–æ—Ç–æ –¥–ª—è —à–∞–≥–∞ '{PHOTO_STEPS[active_step]}' –ø—Ä–∏–Ω—è—Ç–æ! ‚úÖ (–í—Å–µ–≥–æ: {len(task_status['photos'][active_step])})"
        )
        if len(task_status["photos"][active_step]) < MAX_OTHER_PHOTOS:
            await event.respond(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'.",
                buttons=[
                    Button.inline("–ó–∞–≤–µ—Ä—à–∏—Ç—å", data=f"complete_other_{task_id}_{active_step}")
                ]
            )
        task_status["active_step"] = None
    else:
        if len(task_status["photos"][active_step]) > 0:
            await event.respond(f"–®–∞–≥ '{PHOTO_STEPS[active_step]}' —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω!", alert=True)
            return
        task_status["photos"][active_step].append(message.photo)
        await event.respond(f"–§–æ—Ç–æ –¥–ª—è —à–∞–≥–∞ '{PHOTO_STEPS[active_step]}' –ø—Ä–∏–Ω—è—Ç–æ! ‚úÖ")
        task_status["active_step"] = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã
    if all(
        (PHOTO_STEPS[s] == "üì∏ –¥—Ä—É–≥–æ–µ" and len(task_status["photos"][s]) > 0) or
        (PHOTO_STEPS[s] != "üì∏ –¥—Ä—É–≥–æ–µ" and (len(task_status["photos"][s]) > 0 or task_status["photos"][s] == "skipped"))
        for s in task_status["photos"]
    ):
        await complete_task_and_send_report(event, task_id)
    else:
        await update_task_buttons(event, task_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è "–¥—Ä—É–≥–æ–µ"
@client.on(events.CallbackQuery(pattern=r"complete_other_"))
async def complete_other_photos(event):
    data = event.data.decode('utf-8').split('_')
    task_id = data[2]
    step = int(data[3])

    if task_id in user_task_status:
        task_status = user_task_status[task_id]
        await event.respond(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —à–∞–≥–∞ '{PHOTO_STEPS[step]}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ! ‚úÖ")
        task_status["active_step"] = None
        if all(
            (PHOTO_STEPS[s] == "üì∏ –¥—Ä—É–≥–æ–µ" and len(task_status["photos"][s]) > 0) or
            (PHOTO_STEPS[s] != "üì∏ –¥—Ä—É–≥–æ–µ" and (len(task_status["photos"][s]) > 0 or task_status["photos"][s] == "skipped"))
            for s in task_status["photos"]
        ):
            await complete_task_and_send_report(event, task_id)
        else:
            await update_task_buttons(event, task_id)

async def send_long_message(event, text):
    """–†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ —Ç–µ–∫—Å—Ç
    if not text.strip():
        await event.respond("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram ‚Äî 4096 —Å–∏–º–≤–æ–ª–æ–≤
    max_length = 4096
    parts = [text[i:i + max_length] for i in range(0, len(text), max_length)]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    for part in parts:
        await event.respond(part, parse_mode=None)

@client.on(events.NewMessage(pattern='/switch'))
async def handle_switch_command(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /switch"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        contract_number = event.message.text.split(' ', 1)[1].strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ switch3.py
        data = parse_switch_sv(contract_number)
        
        if "–æ—à–∏–±–∫–∞" in data:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {data['–æ—à–∏–±–∫–∞']}")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
        response = []
        if data["—Å–µ—Å—Å–∏—è"]:
            response.append("üì° *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏:*")
            for key, value in data["—Å–µ—Å—Å–∏—è"].items():
                response.append(f"‚Ä¢ {key.replace('_', ' ').title()}: `{value}`")

        if data["–¥–æ–≥–æ–≤–æ—Ä"]:
            response.append("\nüìÑ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–≥–æ–≤–æ—Ä–µ:*")
            for key, value in data["–¥–æ–≥–æ–≤–æ—Ä"].items():
                response.append(f"‚Ä¢ {key.replace('_', ' ').title()}: `{value}`")

        if data["–∞–±–æ–Ω–µ–Ω—Ç"]:
            response.append("\nüë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–±–æ–Ω–µ–Ω—Ç–µ:*")
            for key, value in data["–∞–±–æ–Ω–µ–Ω—Ç"].items():
                response.append(f"‚Ä¢ {key.replace('_', ' ').title()}: `{value}`")

        if data["—Ç—Ä–∞—Ñ–∏–∫"]:
            response.append("\nüìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞:*")
            for direction, info in data["—Ç—Ä–∞—Ñ–∏–∫"].items():
                response.append(f"‚û°Ô∏è *{direction.title()}:*")
                for k, v in info.items():
                    response.append(f"  {k.replace('_', ' ').title()}: `{v}`")

        if data["–ø–æ—Ä—Ç—ã"]:
            response.append("\nüîå *–ü–æ—Ä—Ç—ã –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä–æ–≤:*")
            for idx, port in enumerate(data["–ø–æ—Ä—Ç—ã"], 1):
                response.append(f"\nüîß *–ü–æ—Ä—Ç #{idx}*")
                for key, value in port.items():
                    response.append(f"‚Ä¢ {key.replace('_', ' ').title()}: `{value}`")

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ Telegram
        message = "\n".join(response)
        for chunk in [message[i:i+4096] for i in range(0, len(message), 4096)]:
            await event.respond(chunk, parse_mode='markdown')

    except IndexError:
        await event.respond("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞: `/switch 123456`", parse_mode='markdown')
    except Exception as e:
        await event.respond(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ /diag (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –∏–∑ bot.py –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ)
@client.on(events.NewMessage(pattern='/diag'))
async def handle_diag_command(event):
    try:
        if len(event.message.text.split()) < 2:
            await event.respond("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞: `/diag 123456`", parse_mode='markdown')
            return
        contract_number = event.message.text.split(' ', 1)[1].strip()
        await event.respond(f"–ù–∞—á–∏–Ω–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞ {contract_number}...")
        data = parse_switch_sv(contract_number)
        if "–æ—à–∏–±–∫–∞" in data:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {data['–æ—à–∏–±–∫–∞']}")
            return
        mac_address = data["—Å–µ—Å—Å–∏—è"].get("mac_–∞–¥—Ä–µ—Å")
        if not mac_address:
            await event.respond("‚ùå MAC-–∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        switch_ports = [(port["ip_–∫–æ–º–º—É—Ç–∞—Ç–æ—Ä–∞"], port["–ø–æ—Ä—Ç"]) for port in data["–ø–æ—Ä—Ç—ã"]]
        await event.respond(f"–ü–æ–∏—Å–∫ MAC-–∞–¥—Ä–µ—Å–∞ {mac_address} –Ω–∞ –∫–æ–º–º—É—Ç–∞—Ç–æ—Ä–∞—Ö...")
        for ip, port in switch_ports:
            if str(port).isdigit():
                await event.respond(f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è {ip} –ø–æ—Ä—Ç {port}...")
                result = await telnet_connect_and_search(ip, port)
                await send_long_message(event, result)
            else:
                await event.respond(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {ip}: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç ({port})")
    except Exception as e:
        await event.respond(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@client.on(events.NewMessage(func=lambda e: e.text and not e.photo and not e.media and not e.video and not e.document and not e.audio and not e.voice and not e.sticker and not e.text.startswith('/')))
async def handle_search(event):
    user_id = event.sender_id
    message = event.message.message.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    in_task = any(task["active_step"] is not None and not task["completed"] for task in user_task_status.values())
    
    if in_task:
        await event.respond("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º.")
        return

    if message:
        results = search_abonents(message)

        if results:
            user_search_results[user_id] = results
            user_search_page[user_id] = 0
            total_results = len(results)
            total_pages = (total_results + RESULTS_PER_PAGE - 1) // RESULTS_PER_PAGE
            start = 0
            end = RESULTS_PER_PAGE
            chunk = results[start:end]

            response_text = f"–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∞–±–æ–Ω–µ–Ω—Ç—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ {total_pages}):\n\n"
            for idx, abonent in enumerate(chunk, start=1):
                fio = abonent.get('fio', '‚Äî')
                contract = abonent.get('contract_number', '‚Äî')
                address = abonent.get('address', '‚Äî')
                phone = abonent.get('phone_number', '‚Äî')
                response_text += (
                    f"**{idx}. –§–ò–û:** {fio}\n"
                    f"**‚Ññ –î–æ–≥–æ–≤–æ—Ä–∞:** {contract}\n"
                    f"**–ê–¥—Ä–µ—Å:** {address}\n"
                    f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {phone}\n\n"
                )

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            buttons = []
            if total_pages > 1:
                buttons = [
                    Button.inline("–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", data=f"next_page_{user_id}"),
                    Button.inline("–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", data=f"prev_page_{user_id}")
                ]

            await event.respond(response_text, buttons=[buttons], parse_mode="markdown")
        else:
            await event.respond("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
    else:
        await event.respond("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞.")

client.run_until_disconnected()
